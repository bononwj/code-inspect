{"version":3,"sources":["/webpack:/webpack:/webpack:/webpack:/webpack:/webpack/bootstrap","/webpack:/webpack:/webpack:/webpack:/webpack:/src/calc-text-width.js","/webpack:/webpack:/webpack:/webpack:/webpack:/src/index.js","/webpack:/webpack:/webpack:/webpack:/webpack:/src/color-presets.js","/webpack:/webpack:/webpack:/webpack:/webpack:/src/bare.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","startup","widthsVerdana110","calcWidth","charWidthTable","fallbackWidth","text","total","charWidth","length","charCodeAt","undefined","Verdana110","colorPresets","sanitize","str","replace","bare","subject","status","color","style","icon","iconWidth","typeAssert","iconSpanWidth","sbTextStart","sbTextWidth","stTextWidth","sbRectWidth","stRectWidth","width","xlink","default","assertion","message","TypeError","green","blue","red","yellow","orange","purple","pink","grey","gray","cyan","black"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n\n \t// the startup function\n \tfunction startup() {\n \t\t// Load entry module and return exports\n \t\treturn __webpack_require__(416);\n \t};\n\n \t// run startup\n \treturn startup();\n","const widthsVerdana110 = require(\"./widths-verdana-110.json\")\n\nconst calcWidth = (charWidthTable) => {\n  const fallbackWidth = charWidthTable[64] // Width as \"@\" for overflows\n\n  return ([...text]) => {\n    let total = 0\n    let charWidth = 0\n    let i = text.length\n    while (i--) {\n      charWidth = charWidthTable[text[i].charCodeAt()]\n      total += charWidth === undefined ? fallbackWidth : charWidth\n    }\n    return total\n  }\n}\n\nmodule.exports = {\n  Verdana110: calcWidth(widthsVerdana110)\n}\n","const calcWidth = require('./calc-text-width.js').Verdana110\nconst colorPresets = require('./color-presets.js')\nconst sanitize = str => str.replace(/\\u0026/g, '&amp;').replace(/\\u003C/g, '&lt;')\n\nconst bare = require('./bare.js')\n\nmodule.exports = ({ subject, status, color, style, icon, iconWidth = 13 }) => {\n  typeAssert(typeof status === 'string', '<status> must be string')\n\n  if (!subject && !icon) {\n    return bare({ status, color, style })\n  }\n\n  color = colorPresets[color] || color || colorPresets['blue']\n  iconWidth = iconWidth * 10\n\n  const iconSpanWidth = icon ? (subject.length ? iconWidth + 30 : iconWidth - 18) : 0\n  const sbTextStart = icon ? (iconSpanWidth + 50) : 50\n  const sbTextWidth = calcWidth(subject)\n  const stTextWidth = calcWidth(status)\n  const sbRectWidth = sbTextWidth + 100 + iconSpanWidth\n  const stRectWidth = stTextWidth + 100\n  const width = sbRectWidth + stRectWidth\n  const xlink = icon ? ' xmlns:xlink=\"http://www.w3.org/1999/xlink\"' : ''\n\n  subject = sanitize(subject)\n  status = sanitize(status)\n\n  if (style === 'flat') {\n    return `<svg width=\"${width / 10}\" height=\"20\" viewBox=\"0 0 ${width} 200\" xmlns=\"http://www.w3.org/2000/svg\"${xlink}>\n  <g>\n    <rect fill=\"#555\" width=\"${sbRectWidth}\" height=\"200\"/>\n    <rect fill=\"#${color}\" x=\"${sbRectWidth}\" width=\"${stRectWidth}\" height=\"200\"/>\n  </g>\n  <g fill=\"#fff\" text-anchor=\"start\" font-family=\"Verdana,DejaVu Sans,sans-serif\" font-size=\"110\">\n    <text x=\"${sbTextStart + 10}\" y=\"148\" textLength=\"${sbTextWidth}\" fill=\"#000\" opacity=\"0.1\">${subject}</text>\n    <text x=\"${sbTextStart}\" y=\"138\" textLength=\"${sbTextWidth}\">${subject}</text>\n    <text x=\"${sbRectWidth + 55}\" y=\"148\" textLength=\"${stTextWidth}\" fill=\"#000\" opacity=\"0.1\">${status}</text>\n    <text x=\"${sbRectWidth + 45}\" y=\"138\" textLength=\"${stTextWidth}\">${status}</text>\n  </g>\n  ${icon ? `<image x=\"40\" y=\"35\" width=\"${iconWidth}\" height=\"132\" xlink:href=\"${icon}\"/>` : ''}\n</svg>`\n  }\n\n  return `<svg width=\"${width / 10}\" height=\"20\" viewBox=\"0 0 ${width} 200\" xmlns=\"http://www.w3.org/2000/svg\"${xlink}>\n  <linearGradient id=\"a\" x2=\"0\" y2=\"100%\">\n    <stop offset=\"0\" stop-opacity=\".1\" stop-color=\"#EEE\"/>\n    <stop offset=\"1\" stop-opacity=\".1\"/>\n  </linearGradient>\n  <mask id=\"m\"><rect width=\"${width}\" height=\"200\" rx=\"30\" fill=\"#FFF\"/></mask>\n  <g mask=\"url(#m)\">\n    <rect width=\"${sbRectWidth}\" height=\"200\" fill=\"#555\"/>\n    <rect width=\"${stRectWidth}\" height=\"200\" fill=\"#${color}\" x=\"${sbRectWidth}\"/>\n    <rect width=\"${width}\" height=\"200\" fill=\"url(#a)\"/>\n  </g>\n  <g fill=\"#fff\" text-anchor=\"start\" font-family=\"Verdana,DejaVu Sans,sans-serif\" font-size=\"110\">\n    <text x=\"${sbTextStart + 10}\" y=\"148\" textLength=\"${sbTextWidth}\" fill=\"#000\" opacity=\"0.25\">${subject}</text>\n    <text x=\"${sbTextStart}\" y=\"138\" textLength=\"${sbTextWidth}\">${subject}</text>\n    <text x=\"${sbRectWidth + 55}\" y=\"148\" textLength=\"${stTextWidth}\" fill=\"#000\" opacity=\"0.25\">${status}</text>\n    <text x=\"${sbRectWidth + 45}\" y=\"138\" textLength=\"${stTextWidth}\">${status}</text>\n  </g>\n  ${icon ? `<image x=\"40\" y=\"35\" width=\"${iconWidth}\" height=\"130\" xlink:href=\"${icon}\"/>` : ''}\n</svg>`\n}\n\nmodule.exports.default = module.exports\n\nconst typeAssert = (assertion, message) => {\n  if (!assertion) throw new TypeError(message)\n}\n","module.exports = {\n  green: '3C1',\n  blue: '08C',\n  red: 'E43',\n  yellow: 'DB1',\n  orange: 'F73',\n  purple: '94E',\n  pink: 'E5B',\n  grey: '999',\n  gray: '999',\n  cyan: '1BC',\n  black: '2A2A2A'\n}\n","const calcWidth = require('./calc-text-width.js').Verdana110\nconst colorPresets = require('./color-presets.js')\nconst sanitize = str => str.replace(/\\u0026/g, '&amp;').replace(/\\u003C/g, '&lt;')\n\nmodule.exports = ({ status, color, style }) => {\n  typeAssert(typeof status === 'string', '<status> must be string')\n  color = colorPresets[color] || color || colorPresets['blue']\n\n  const stTextWidth = calcWidth(status)\n  const stRectWidth = stTextWidth + 115\n\n  status = sanitize(status)\n\n  if (style === 'flat') {\n    return `<svg width=\"${stRectWidth / 10}\" height=\"20\" viewBox=\"0 0 ${stRectWidth} 200\" xmlns=\"http://www.w3.org/2000/svg\">\n  <g>\n    <rect fill=\"#${color}\" x=\"0\" width=\"${stRectWidth}\" height=\"200\"/>\n  </g>\n  <g fill=\"#fff\" text-anchor=\"start\" font-family=\"Verdana,DejaVu Sans,sans-serif\" font-size=\"110\">\n    <text x=\"65\" y=\"148\" textLength=\"${stTextWidth}\" fill=\"#000\" opacity=\"0.1\">${status}</text>\n    <text x=\"55\" y=\"138\" textLength=\"${stTextWidth}\">${status}</text>\n  </g>\n</svg>`\n  }\n\n  return `<svg width=\"${stRectWidth / 10}\" height=\"20\" viewBox=\"0 0 ${stRectWidth} 200\" xmlns=\"http://www.w3.org/2000/svg\">\n  <linearGradient id=\"a\" x2=\"0\" y2=\"100%\">\n    <stop offset=\"0\" stop-opacity=\".1\" stop-color=\"#EEE\"/>\n    <stop offset=\"1\" stop-opacity=\".1\"/>\n  </linearGradient>\n  <mask id=\"m\"><rect width=\"${stRectWidth}\" height=\"200\" rx=\"30\" fill=\"#FFF\"/></mask>\n  <g mask=\"url(#m)\">\n    <rect width=\"${stRectWidth}\" height=\"200\" fill=\"#${color}\" x=\"0\"/>\n    <rect width=\"${stRectWidth}\" height=\"200\" fill=\"url(#a)\"/>\n  </g>\n  <g fill=\"#fff\" text-anchor=\"start\" font-family=\"Verdana,DejaVu Sans,sans-serif\" font-size=\"110\">\n    <text x=\"65\" y=\"148\" textLength=\"${stTextWidth}\" fill=\"#000\" opacity=\"0.25\">${status}</text>\n    <text x=\"55\" y=\"138\" textLength=\"${stTextWidth}\">${status}</text>\n  </g>\n</svg>`\n}\n\nconst typeAssert = (assertion, message) => {\n  if (!assertion) throw new TypeError(message)\n}\n"]}